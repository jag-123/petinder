
General Feedback:
- react-components folder could be cleaned up to be in sub-folders, especially because some of the files are specific to the routes information, and others are presentational react components, and it makes it very hard to navigate through each one
- good use of react-router
- register doesn't redirect to home page immediately after, and you need to refresh the page to get to the home page
- good use of petfinder and working through the API. I think you should look more closely at the https://github.com/mjhea0/passport-local-express4 example, and I had commented about it in Ariana's Twotter App, if you want to look at a correct implementation
- awesome visual layout and design of the app, especially the resizing of the image and the layout of the Pets-picking page
- work to have everything in es6 or es5 for readability


Homework Feedback:

Functionality:
- Completion: Zoher - This is a pretty cool app that you guys have built! It has all of the functionality needed to be a combination of Petfinder and Tinder in that users can log in using Facebook or a username and password, indicate their preferences for the pets they want to match with, and then swipe left or right for those pets. They can also view their matches. It also looks great and is really intuitive to use! I would have liked to see the preferences page visibly show the user the preferences they have already selected, as opposed to clearing out all of the checkboxes and having the user resubmit their preferences. That way, it is clear to the user that they don't have to reselect all of their preferences again to make a change. I also think you could have replaced the home page so that once the user logs in and sets their preferences, they can go straight into swiping left or right on pets. Cynthia - You have OAuth (except for a complete registration capability) and all of the features that you set out to do completed. (77/80)
- Bug Free: Zoher - The only bug I could clearly see is that my matches do not update immediately after I swipe right on pets. To reproduce this behavior, swipe right on some pets and then click on matches and you won't see them there immediately. If you refresh the page or go to another page and then return back to matches, you will see your latest matches. In looking at your code, the only reason I can see for this behavior would be that your GET request to /showmatches returns before the POST request to /match has been made. I would maybe have grouped these two requests and forced them to run synchronously so that the GET request always happens after the POST or have the POST request return a user object where all the pet IDs that they have matched with are already populated. Cynthia - The app does seem bug free, except the registration part. Also, when you logout, I noticed that the route is not back at login, but instead at "/getPet?", which is not really accurate. Lastly, what out for the console errors and warnings that pop up, because there are quite a few. (18/20)
- Design/Usability: I really liked the styling effort. THe home page is a little sparce, and could have been removed or combined with something else. Also, the setting of preferences, tinder aspect and seeing all of the matches of the app was really nice! Nice work! Maybe renaming the navbar links would make navigation more clear, too. (18/20)

Quality:
- Good Coding Practices: Zoher - Good Coding Practices: There were a couple of things that you guys did that are not good coding practices. You pushed your auth.js file to Github which means anyone can see your app keys and secrets. You also did not add node_modules to your .gitignore which made pulling it from Github a hassle. I would also have simplified some of your routes so that they return more useful objects that can be used to set the state like populating the user object's matched pet IDs and returning that user object each time a match is made. Cynthia - Good use of ajax requests, and well-written components. (38/40)
- Readability: Zoher - Your code is well-commented and your React components are nice and modular. There is some stray commented code in routes/index.js and in react_components/MatchDelete.js and a couple other places that could probably be cleaned up. I would also have spent a little more time on the back-end, thinking about what the requests need to actually return to be most useful in terms of your React components. Cynthia - The comments on this app are extremely well-written, and functions and variables are named well. It would have been nice for the react-components folder to have been cleaned up. Also, there are some weird spacing issues that made your html for components hard to read. Lastly, remove unused commented-out code, and there is no consistency in ES6 or ES5. Linting will definitely help with making sure that spacing and coding practices are done correctly. (35/40)



Nice work!
Awesome job!
